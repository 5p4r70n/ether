pragma solidity ^0.5.0;
contract myContract{
        
    string public display ="2+4";
}





pragma solidity ^0.5.0;
contract myContract{
        
   uint a=20;
   uint b=40;
   
   uint public z = b/a;
   
}





pragma solidity ^0.5.0;
contract Mycontract {
    uint [] public arr;
    function insert(uint a) public{
        arr.push(a);
    }
    function fetch() public view returns (uint last)
    {
        last= arr[arr.length-1];
    }

}




pragma solidity ^0.5.0;
contract newcon{
    struct kyc {
        string name;
        uint age;
    }
    
    mapping(uint=>kyc ) public person;
    function set(uint mobileno,string memory name,uint age) public{
        
        person[mobileno] = kyc(name,age);
    }
}



pragma solidity ^0.5.0;
contract myContract{
    function greatest (uint a,uint b,uint c ) public pure returns(uint max){
        if ((a>b)&& (a>c))
        max = a;
        else if  ((b>a)&&(b>c))
        max= b;
        else
            max=c;
    }
}



pragma solidity ^0.5.0;
contract myContract {
    
    function facto(uint num) public pure returns (uint fact){
        uint f=1;
        for(uint i=1;i<=num;i++){
            f=f*i;
        }
    }
}
